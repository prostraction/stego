package dct

func pixel(img *[]uint8, x int, y int, width int, channels int8, channelSelected int8) uint8 {
	return (*img)[int(channelSelected)+(int(channels)*(x+(y*width)))]
}

/* Only one channel of image will be procceed */
func MakeDCT(dctEmptyMatrix *[]float32, img *[]uint8, xPos int, yPos int, width int, channels int8, channelSelected int8) {
	const c1 = 1004
	const s1 = 200
	const c3 = 851
	const s3 = 569
	const r2c6 = 554
	const r2s6 = 1337
	const r2 = 181

	var rows [8][8]int
	var x0, x1, x2, x3, x4, x5, x6, x7, x8 int

	for i := 0; i < 8; i++ {
		x0 = int(pixel(img, xPos+0, yPos+i, width, channels, channelSelected))
		x1 = int(pixel(img, xPos+1, yPos+i, width, channels, channelSelected))
		x2 = int(pixel(img, xPos+2, yPos+i, width, channels, channelSelected))
		x3 = int(pixel(img, xPos+3, yPos+i, width, channels, channelSelected))
		x4 = int(pixel(img, xPos+4, yPos+i, width, channels, channelSelected))
		x5 = int(pixel(img, xPos+5, yPos+i, width, channels, channelSelected))
		x6 = int(pixel(img, xPos+6, yPos+i, width, channels, channelSelected))
		x7 = int(pixel(img, xPos+7, yPos+i, width, channels, channelSelected))

		x8 = x7 + x0
		x0 -= x7
		x7 = x1 + x6
		x1 -= x6
		x6 = x2 + x5
		x2 -= x5
		x5 = x3 + x4
		x3 -= x4

		x4 = x8 + x5
		x8 -= x5
		x5 = x7 + x6
		x7 -= x6
		x6 = c1 * (x1 + x2)
		x2 = (-s1-c1)*x2 + x6
		x1 = (s1-c1)*x1 + x6
		x6 = c3 * (x0 + x3)
		x3 = (-s3-c3)*x3 + x6
		x0 = (s3-c3)*x0 + x6

		x6 = x4 + x5
		x4 -= x5
		x5 = r2c6 * (x7 + x8)
		x7 = (-r2s6-r2c6)*x7 + x5
		x8 = (r2s6-r2c6)*x8 + x5
		x5 = x0 + x2
		x0 -= x2
		x2 = x3 + x1
		x3 -= x1

		rows[i][0] = x6
		rows[i][4] = x4
		rows[i][2] = x8 >> 10
		rows[i][6] = x7 >> 10
		rows[i][7] = (x2 - x5) >> 10
		rows[i][1] = (x2 + x5) >> 10
		rows[i][3] = (x3 * r2) >> 17
		rows[i][5] = (x0 * r2) >> 17
	}

	for i := 0; i < 8; i++ {
		x0 = rows[0][i]
		x1 = rows[1][i]
		x2 = rows[2][i]
		x3 = rows[3][i]
		x4 = rows[4][i]
		x5 = rows[5][i]
		x6 = rows[6][i]
		x7 = rows[7][i]

		x8 = x7 + x0
		x0 -= x7
		x7 = x1 + x6
		x1 -= x6
		x6 = x2 + x5
		x2 -= x5
		x5 = x3 + x4
		x3 -= x4

		x4 = x8 + x5
		x8 -= x5
		x5 = x7 + x6
		x7 -= x6
		x6 = c1 * (x1 + x2)
		x2 = (-s1-c1)*x2 + x6
		x1 = (s1-c1)*x1 + x6
		x6 = c3 * (x0 + x3)
		x3 = (-s3-c3)*x3 + x6
		x0 = (s3-c3)*x0 + x6

		x6 = x4 + x5
		x4 -= x5
		x5 = r2c6 * (x7 + x8)
		x7 = (-r2s6-r2c6)*x7 + x5
		x8 = (r2s6-r2c6)*x8 + x5
		x5 = x0 + x2
		x0 -= x2
		x2 = x3 + x1
		x3 -= x1

		(*dctEmptyMatrix)[i+8*0] = (float32)((x6 + 16) >> 3)
		(*dctEmptyMatrix)[i+8*4] = (float32)((x4 + 16) >> 3)
		(*dctEmptyMatrix)[i+8*2] = (float32)((x8 + 16384) >> 13)
		(*dctEmptyMatrix)[i+8*6] = (float32)((x7 + 16384) >> 13)
		(*dctEmptyMatrix)[i+8*7] = (float32)((x2 - x5 + 16384) >> 13)
		(*dctEmptyMatrix)[i+8*1] = (float32)((x2 + x5 + 16384) >> 13)
		(*dctEmptyMatrix)[i+8*3] = (float32)(((x3>>8)*r2 + 8192) >> 12)
		(*dctEmptyMatrix)[i+8*5] = (float32)(((x0>>8)*r2 + 8192) >> 12)
	}
}

/* Only one channel of image will be procceed */
func makeIDCT_1D(F *[]int) []int {
	f := make([]int, 8)
	var p, n int
	p = (*F)[1] + (*F)[7]
	n = (*F)[1] - (*F)[7]

	(*F)[1] = p + (*F)[3]
	(*F)[7] = n + (*F)[5]
	(*F)[5] = n - (*F)[5]
	(*F)[3] = p - (*F)[3]

	p = (*F)[5] * 45
	n = (*F)[3] * 45
	(*F)[5] = (n + p + (p << 2) + (*F)[5]) >> 7
	(*F)[3] = (n - p + (n << 2) + (*F)[3]) >> 7

	p = (*F)[1] << 8
	n = (*F)[7] << 8
	(*F)[1] = (n + p + ((*F)[1] << 7) - (*F)[1]) >> 8
	(*F)[7] = (n - p + ((*F)[7] << 7) - (*F)[7]) >> 8

	p = (*F)[6]
	(*F)[6] += (*F)[2]
	(*F)[2] = (((*F)[2] - p) * 181 >> 7) - (*F)[6]

	p = (*F)[0] + (*F)[4]
	n = (*F)[0] - (*F)[4]
	(*F)[0] = p + (*F)[6]
	(*F)[4] = n + (*F)[2]
	(*F)[2] = n - (*F)[2]
	(*F)[6] = p - (*F)[6]

	f[0] = (*F)[0] + (*F)[1]
	f[1] = (*F)[4] + (*F)[5]
	f[2] = (*F)[2] + (*F)[3]
	f[3] = (*F)[6] + (*F)[7]
	f[4] = (*F)[6] - (*F)[7]
	f[5] = (*F)[2] - (*F)[3]
	f[6] = (*F)[4] - (*F)[5]
	f[7] = (*F)[0] - (*F)[1]
	return f
}

/* Only one channel of image will be procceed */
func MakeIDCT(dctMatrix *[]float32, img *[]uint8, xPos int, yPos int, width int, channels int8, channelSelected int8) {

	scale := [64]int{
		4096, 2276, 5352, 3218, 4096, 3218, 2217, 2276,
		2276, 1264, 2973, 1788, 2276, 1788, 1232, 1264,
		5352, 2973, 6992, 4205, 5352, 4205, 2896, 2973,
		3218, 1788, 4205, 2529, 3218, 2529, 1742, 1788,
		4096, 2276, 5352, 3218, 4096, 3218, 2217, 2276,
		3218, 1788, 4205, 2529, 3218, 2529, 1742, 1788,
		2217, 1232, 2896, 1742, 2217, 1742, 1200, 1232,
		2276, 1264, 2973, 1788, 2276, 1788, 1232, 1264,
	}

	clipTable := [3 * 256]int{
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	}
	idctMatrix := make([]int, 64)
	idctMatrixOut := make([]int, 64)
	rows := make([]int, 64)
	cols := make([]int, 64)
	for i := 0; i < 64; i++ {
		idctMatrix[i] = int((*dctMatrix)[i])
	}

	rows[0] = (idctMatrix[0] + 4) * scale[0]
	for i := 1; i < 64; i++ {
		rows[i] = idctMatrix[i] * scale[i]
	}

	for i := 0; i < 8; i++ {
		row := rows[(i * 8) : (i*8)+8]
		col := makeIDCT_1D(&row)
		for j := 0; j < 8; j++ {
			cols[(j*8)+i] = col[j]
		}
	}

	for i := 0; i < 8; i++ {
		col := cols[(i * 8) : (i*8)+8]
		row := makeIDCT_1D(&col)
		for j := 0; j < 8; j++ {
			rows[(j*8)+i] = row[j]
		}
	}

	for i := 0; i < 64; i++ {
		idctMatrixOut[i] = clipTable[256+((rows[i]>>15)%256)]
	}

	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			(*img)[int(channelSelected)+(int(channels)*((j+xPos)+width*(i+yPos)))] = uint8(idctMatrixOut[8*i+j])
		}

	}

}
